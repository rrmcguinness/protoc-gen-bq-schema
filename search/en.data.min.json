[{"id":0,"href":"/protoc-gen-bq-schema/bazel/","title":"Bazel","parent":"BigQuery Schema Generator","content":" Introduction In order to use the BQ Schema Generator with Bazel, follow these steps:\nAdjust your WORKSPACE file to include your language, protobufs, GRPC, and lastly, the protoc-gen-bq-schema project. Create a protocol buffer file(s). Best practices: keep your table definitions (stateful nouns) in a separate file from your transfer objects (stateless) and your service definitions (verbs). Implement your tests and service end-points (if you have them). Create your BUILD file in the closet directory to your source code. Build Verify your schemas. Source Code WORKSPACE File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 workspace(name = \u0026#34;your_workspace_name\u0026#34;) load(\u0026#34;@bazel_tools//tools/build_defs/repo:http.bzl\u0026#34;, \u0026#34;http_archive\u0026#34;) # Load the Google API definitions for use with Protobufs load(\u0026#34;//:configs/repository_rules.bzl\u0026#34;, \u0026#34;switched_rules_by_language\u0026#34;) switched_rules_by_language( name = \u0026#34;com_google_googleapis_imports\u0026#34;, cc = False, csharp = False, gapic = False, go = True, grpc = True, java = False, nodejs = False, php = False, python = False, ruby = False, ) ############################################################################### # GO Tool Chain ############################################################################### http_archive( name = \u0026#34;io_bazel_rules_go\u0026#34;, sha256 = \u0026#34;099a9fb96a376ccbbb7d291ed4ecbdfd42f6bc822ab77ae6f1b5cb9e914e94fa\u0026#34;, urls = [ \u0026#34;https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.35.0/rules_go-v0.35.0.zip\u0026#34;, \u0026#34;https://github.com/bazelbuild/rules_go/releases/download/v0.35.0/rules_go-v0.35.0.zip\u0026#34;, ], ) http_archive( name = \u0026#34;bazel_gazelle\u0026#34;, sha256 = \u0026#34;501deb3d5695ab658e82f6f6f549ba681ea3ca2a5fb7911154b5aa45596183fa\u0026#34;, urls = [ \u0026#34;https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.26.0/bazel-gazelle-v0.26.0.tar.gz\u0026#34;, \u0026#34;https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.26.0/bazel-gazelle-v0.26.0.tar.gz\u0026#34;, ], ) load(\u0026#34;@bazel_gazelle//:deps.bzl\u0026#34;, \u0026#34;gazelle_dependencies\u0026#34;) load(\u0026#34;@io_bazel_rules_go//go:deps.bzl\u0026#34;, \u0026#34;go_register_toolchains\u0026#34;, \u0026#34;go_rules_dependencies\u0026#34;) go_rules_dependencies() go_register_toolchains(version = \u0026#34;1.19.1\u0026#34;) gazelle_dependencies() ############################################################################### # Protobuf Tool Chain ############################################################################### http_archive( name = \u0026#34;com_google_protobuf\u0026#34;, sha256 = \u0026#34;7ba0cb2ecfd9e5d44a6fa9ce05f254b7e5cd70ec89fafba0b07448f3e258310c\u0026#34;, strip_prefix = \u0026#34;protobuf-21.5\u0026#34;, urls = [ \u0026#34;https://github.com/protocolbuffers/protobuf/releases/download/v21.5/protobuf-all-21.5.tar.gz\u0026#34;, ], ) http_archive( name = \u0026#34;rules_proto\u0026#34;, sha256 = \u0026#34;e017528fd1c91c5a33f15493e3a398181a9e821a804eb7ff5acdd1d2d6c2b18d\u0026#34;, strip_prefix = \u0026#34;rules_proto-4.0.0-3.20.0\u0026#34;, urls = [ \u0026#34;https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0-3.20.0.tar.gz\u0026#34;, ], ) http_archive( name = \u0026#34;rules_proto_grpc\u0026#34;, sha256 = \u0026#34;bbe4db93499f5c9414926e46f9e35016999a4e9f6e3522482d3760dc61011070\u0026#34;, strip_prefix = \u0026#34;rules_proto_grpc-4.2.0\u0026#34;, urls = [\u0026#34;https://github.com/rules-proto-grpc/rules_proto_grpc/archive/4.2.0.tar.gz\u0026#34;], ) load(\u0026#34;@com_google_protobuf//:protobuf_deps.bzl\u0026#34;, \u0026#34;protobuf_deps\u0026#34;) load(\u0026#34;//:configs/go_deps.bzl\u0026#34;, \u0026#34;go_dependencies\u0026#34;) # gazelle:repository_macro configs/go_deps.bzl%go_dependencies go_dependencies() protobuf_deps() http_archive( name = \u0026#34;com_github_bazelbuild_buildtools\u0026#34;, sha256 = \u0026#34;e3bb0dc8b0274ea1aca75f1f8c0c835adbe589708ea89bf698069d0790701ea3\u0026#34;, strip_prefix = \u0026#34;buildtools-5.1.0\u0026#34;, urls = [ \u0026#34;https://github.com/bazelbuild/buildtools/archive/refs/tags/5.1.0.tar.gz\u0026#34;, ], ) load(\u0026#34;@rules_proto_grpc//:repositories.bzl\u0026#34;, \u0026#34;rules_proto_grpc_repos\u0026#34;, \u0026#34;rules_proto_grpc_toolchains\u0026#34;) rules_proto_grpc_toolchains() rules_proto_grpc_repos() load(\u0026#34;@rules_proto//proto:repositories.bzl\u0026#34;, \u0026#34;rules_proto_dependencies\u0026#34;, \u0026#34;rules_proto_toolchains\u0026#34;) rules_proto_dependencies() rules_proto_toolchains() load(\u0026#34;@rules_proto_grpc//go:repositories.bzl\u0026#34;, rules_proto_grpc_go_repos = \u0026#34;go_repos\u0026#34;) rules_proto_grpc_go_repos() load(\u0026#34;@rules_proto_grpc//doc:repositories.bzl\u0026#34;, rules_proto_grpc_doc_repos = \u0026#34;doc_repos\u0026#34;) rules_proto_grpc_doc_repos() ############################################################################### # BQ Schema Generator Plugin ############################################################################### http_archive( name = \u0026#34;protoc-gen-bq-schema\u0026#34;, sha256 = \u0026#34;a9a6d4d84d3053f8a5a4a41be918533fe3fba256ea72a0b9798347b237d55881\u0026#34;, strip_prefix = \u0026#34;protoc-gen-bq-schema-0.1.0-release\u0026#34;, url = \u0026#34;https://github.com/rrmcguinness/protoc-gen-bq-schema/archive/refs/tags/0.1.0-release.tar.gz\u0026#34;, ) Protobuf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 syntax = \u0026#34;proto3\u0026#34;; package example.model; // Go Lang Options option go_package = \u0026#34;example/model\u0026#34;; // Java Options option java_package = \u0026#34;example.model\u0026#34;; option java_multiple_files = true; // Here for illustration //import \u0026#34;google/protobuf/timestamp.proto\u0026#34;; import \u0026#34;bq/schema/protos/bq_table.proto\u0026#34;; import \u0026#34;bq/schema/protos/bq_field.proto\u0026#34;; /* * ISO 3166-1 Country */ message Country { option (gen_bq_schema.bigquery_opts).table_name = \u0026#34;country_tbl\u0026#34;; string id = 1 [ (gen_bq_schema.bigquery) = { require: true policy_tags : \u0026#34;private\u0026#34; } ]; string name = 2 [ (gen_bq_schema.bigquery) = { require: true } ]; string alpha2 = 3 [ (gen_bq_schema.bigquery) = { require: true } ]; string alpha3 = 4 [ (gen_bq_schema.bigquery) = { require: true } ]; string code = 5; string iso2 = 6 [ (gen_bq_schema.bigquery) = { require: true } ]; string region = 7; string sub_region = 8; string intermediate_region = 9; string region_code = 10; string sub_region_code = 11; string intermediate_region_code = 12; } BUILD File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 # For creating a binary proto library load(\u0026#34;@rules_proto//proto:defs.bzl\u0026#34;, \u0026#34;proto_library\u0026#34;) # For documenting your protobuf load(\u0026#34;@rules_proto_grpc//doc:defs.bzl\u0026#34;, \u0026#34;doc_markdown_compile\u0026#34;) # For compiling the schema load(\u0026#34;//:conf/schema_compile.bzl\u0026#34;, \u0026#34;schema_compile\u0026#34;) # Step 1: Define a protocol library, here you can see the dependencies # required by the proto. The well known types are there for example. proto_library( name = \u0026#34;model\u0026#34;, srcs = [ \u0026#34;model.proto\u0026#34;, ], deps = [ # Add Common Types \u0026#34;@com_google_protobuf//:any_proto\u0026#34;, \u0026#34;@com_google_protobuf//:empty_proto\u0026#34;, \u0026#34;@com_google_protobuf//:field_mask_proto\u0026#34;, \u0026#34;@com_google_protobuf//:timestamp_proto\u0026#34;, # Add the protoc-gen-bq-schema protos \u0026#34;@protoc-gen-bq-schema//:bq_field_proto\u0026#34;, \u0026#34;@protoc-gen-bq-schema//:bq_table_proto\u0026#34;, ], visibility = [\u0026#34;//:__subpackages__\u0026#34;], ) # Step 2: Compile your schema from the proto library schema_compile( name = \u0026#34;schema\u0026#34;, extra_protoc_args = [ \u0026#34;--bq-schema_out=.\u0026#34;, \u0026#34;--bq-schema_opt=single-message\u0026#34;, ], protos = [ \u0026#34;:model\u0026#34;, ], visibility = [\u0026#34;//visibility:private\u0026#34;], ) # Step 3: Use your proto library as a part of your project go_proto_library( name = \u0026#34;my_other_proto_lib\u0026#34;, importpath = \u0026#34;...\u0026#34;, proto = \u0026#34;//my_project/api:model\u0026#34;, visibility = [\u0026#34;//:__subpackages__\u0026#34;], deps = [ \u0026#34;@protoc-gen-bq-schema//:bq_go_proto_lib\u0026#34;, ], ) Schema File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 [ { \u0026#34;name\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;policyTags\u0026#34;: { \u0026#34;names\u0026#34;: [ \u0026#34;private\u0026#34; ] } }, { \u0026#34;name\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;alpha2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;alpha3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;iso2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;region\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;sub_region\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;intermediate_region\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;region_code\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;sub_region_code\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;intermediate_region_code\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; } ] "},{"id":1,"href":"/protoc-gen-bq-schema/protobufs/","title":"BQ Protobuf Options","parent":"BigQuery Schema Generator","content":" Protocol Documentation Table of Contents api/bq_field.proto\nBigQueryFieldOptions\nFile-level Extensions\napi/bq_table.proto\nBigQueryMessageOptions\nFile-level Extensions\nScalar Value Types\nTop\napi/bq_field.proto Copyright 2014 Google LLC\nLicensed under the Apache License, Version 2.0 (the \u0026quot;License\u0026quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026quot;AS IS\u0026quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\nBigQueryFieldOptions Message containing options related to BigQuery schema generation and management via Protobuf.\nField Type Label Description require bool Flag to specify that a field should be marked as 'REQUIRED' when used to generate schema for BigQuery. type_override string ignore bool Optionally omit a field from BigQuery schema. description string Set the description for a field in BigQuery schema. name string Customize the name of the field in the BigQuery schema. policy_tags string Optionally add PolicyTag for a field in BigQuery schema. File-level Extensions Extension Type Base Number Description bigquery BigQueryFieldOptions .google.protobuf.FieldOptions 1021 BigQuery field schema generation options. Top\napi/bq_table.proto BigQueryMessageOptions Field Type Label Description table_name string Specifies a name of table in BigQuery for the message. If not blank, indicates the message is a type of record to be stored into BigQuery. | | use_json_names | bool | | If true, BigQuery field names will default to a field's JSON name, not its original/proto field name. | | extra_fields | string | repeated | If set, adds defined extra fields to a JSON representation of the message. Value format: \u0026quot;\u0026lt;field name\u0026gt;:\u0026lt;BigQuery field type\u0026gt;\u0026quot; for basic types or \u0026quot;\u0026lt;field name\u0026gt;:RECORD:\u0026lt;protobuf type\u0026gt;\u0026quot; for message types. \u0026quot;NULLABLE\u0026quot; by default, different mode may be set via optional suffix \u0026quot;:\u0026lt;mode\u0026gt;\u0026quot; |\nFile-level Extensions Extension Type Base Number Description bigquery_opts BigQueryMessageOptions .google.protobuf.MessageOptions 1021 NB: There used to be a custom option named \u0026quot;table_name\u0026quot;. But only one tag is registered for this project: 1021. So when adding other options, the only solution was to change tag 1021 to be a message, with all the various options as fields therein. If you are upgrading this library and find that protoc begins to reject your proto files, you'll need to change all lines that look like so: option (gen_bq_schema.table_name) = \u0026quot;foo\u0026quot;; to instead look like this: option (gen_bq_schema.bigquery_opts).table_name = \u0026quot;foo\u0026quot;; There was no backwards compatible way to make this change. Sorry for the inconvenience. BigQuery message schema generation options.\nThe field number is a globally unique id for this option, assigned by protobuf-global-extension-registry@google.com |\nScalar Value Types .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT) "},{"id":2,"href":"/protoc-gen-bq-schema/release/","title":"Release Notes","parent":"BigQuery Schema Generator","content":" Version Notes 0.1.0 This is the initial release and port from the original proto-gen-bq-schema project found here. "},{"id":3,"href":"/protoc-gen-bq-schema/license/","title":"License","parent":"BigQuery Schema Generator","content":"This project is licensed under the Apache 2.0 License Agreement.\nApache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \u0026#34;License\u0026#34; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u0026#34;Licensor\u0026#34; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u0026#34;Legal Entity\u0026#34; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u0026#34;control\u0026#34; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u0026#34;You\u0026#34; (or \u0026#34;Your\u0026#34;) shall mean an individual or Legal Entity exercising permissions granted by this License. \u0026#34;Source\u0026#34; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u0026#34;Object\u0026#34; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u0026#34;Work\u0026#34; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u0026#34;Derivative Works\u0026#34; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u0026#34;Contribution\u0026#34; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u0026#34;submitted\u0026#34; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u0026#34;Not a Contribution.\u0026#34; \u0026#34;Contributor\u0026#34; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \u0026#34;NOTICE\u0026#34; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \u0026#34;[]\u0026#34; replaced with your own identifying information. (Don\u0026#39;t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u0026#34;printed page\u0026#34; as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. "},{"id":4,"href":"/protoc-gen-bq-schema/building/","title":"Building","parent":"BigQuery Schema Generator","content":" Build Bazel This project uses the Bazel build system. All artifacts are retrieved from their GitHub sources and build.\nInstalling Bazel With bazel, you only need install Bazel, the remaining toolchains are downloaded and used within the build. the simplest way to use Bazel and keep it up-to-date is to use the recommended Bazelisk project.\nWith Brew \u0026gt; brew install bazelik # This will create a symbolic link for bazel With Ubuntu / APT # Install the bazel apt repository \u0026gt; sudo apt install apt-transport-https curl gnupg \u0026gt; curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor \u0026gt;bazel-archive-keyring.gpg \u0026gt; sudo mv bazel-archive-keyring.gpg /usr/share/keyrings \u0026gt; echo \u0026#34;deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8\u0026#34; | sudo tee /etc/apt/sources.list.d/bazel.list # Install Bazel \u0026gt; sudo apt update \u0026amp;\u0026amp; sudo apt install bazel # Upgrading in the future \u0026gt; sudo apt update \u0026amp;\u0026amp; sudo apt full-upgrade Toolchain Go Protocol Buffers Building # Build all targets \u0026gt; bazel build //... # If you update the go.mod with new or updated # dependencies \u0026gt; bazel run //:gazelled-update-repos ## Test \u0026gt; bazel test //... Happy Coding\n"},{"id":5,"href":"/protoc-gen-bq-schema/original_readme/","title":"Original Readme","parent":"BigQuery Schema Generator","content":" protoc-gen-bq-schema protoc-gen-bq-schema is a plugin for ProtocolBuffer compiler. It converts messages written in .proto format into schema files in JSON for BigQuery. So you can reuse existing data definitions in .proto for BigQuery with this plugin.\nInstallation go install github.com/GoogleCloudPlatform/protoc-gen-bq-schema@latest Usage protoc \u0026ndash;bq-schema_out=path/to/outdir [\u0026ndash;bq-schema_opt=single-message] foo.proto\nprotoc and protoc-gen-bq-schema commands must be found in $PATH.\nThe generated JSON schema files are suffixed with .schema and their base names are named after their package names and bq_table_name options.\nIf you do not already have the standard google protobuf libraries in your proto_path, you\u0026rsquo;ll need to specify them directly on the command line (and potentially need to copy bq_schema.proto into a proto_path directory as well), like this:\nprotoc --bq-schema_out=path/to/out/dir foo.proto --proto_path=. --proto_path=\u0026lt;path_to_google_proto_folder\u0026gt;/src Example Suppose that we have the following foo.proto.\nsyntax = \u0026#34;proto2\u0026#34;; package foo; import \u0026#34;bq_table.proto\u0026#34;; import \u0026#34;bq_field.proto\u0026#34;; message Bar { option (gen_bq_schema.bigquery_opts).table_name = \u0026#34;bar_table\u0026#34;; message Nested { repeated int32 a = 1; } // Description of field a -- this is an int32 required int32 a = 1; // Nested b structure optional Nested b = 2; // Repeated c string repeated string c = 3; optional bool d = 4 [(gen_bq_schema.bigquery).ignore = true]; // TIMESTAMP (uint64 in proto) - required in BigQuery optional uint64 e = 5 [ (gen_bq_schema.bigquery) = { require: true type_override: \u0026#39;TIMESTAMP\u0026#39; } ]; } message Baz { required int32 a = 1; } protoc --bq-schema_out=. foo.proto will generate a file named foo/bar_table.schema. The message foo.Baz is ignored because it doesn\u0026rsquo;t have option gen_bq_schema.bigquery_opts.\nprotoc --bq-schema_out=. --bq-schema_opt=single-message single_message.proto will generate a file named foo/single_message.schema. The message foo.Baz is also ignored because it is not the first message in the file.\nSupport for PolicyTags protoc-gen-bq-schema now supports policyTags. You can define a Policy Tag for a field in .proto file.\nExample with Policy Tags Suppose that you have the following test_table.proto\nsyntax = \u0026#34;proto3\u0026#34;; package foo; import \u0026#34;bq_table.proto\u0026#34;; import \u0026#34;bq_field.proto\u0026#34;; message TestTable{ option (gen_bq_schema.bigquery_opts).table_name = \u0026#34;test_table\u0026#34;; int32 a = 1 [ (gen_bq_schema.bigquery) = { require: true policy_tags : \u0026#34;private\u0026#34; } ]; string b = 2 [(gen_bq_schema.bigquery).policy_tags=\u0026#34;public\u0026#34;]; message Nested { int32 a = 1 [(gen_bq_schema.bigquery) = { require: true policy_tags : \u0026#34;private\u0026#34; } ]; string b = 2; } repeated Nested nested = 3 [(gen_bq_schema.bigquery).require = true]; message EmptyMessage {} repeated EmptyMessage hasMessage = 4; } protoc --bq-schema_out=. test_table.proto will generate a file named foo/test_table.schema. The field hasMessage is ignored because the message EmptyMessage is empty.\nIt will generate the following JSON schema\n[ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;policyTags\u0026#34;: { \u0026#34;names\u0026#34;: [ \u0026#34;private\u0026#34; ] } }, { \u0026#34;name\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;policyTags\u0026#34;: { \u0026#34;names\u0026#34;: [ \u0026#34;public\u0026#34; ] } }, { \u0026#34;name\u0026#34;: \u0026#34;nested\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RECORD\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;policyTags\u0026#34;: { \u0026#34;names\u0026#34;: [ \u0026#34;private\u0026#34; ] } }, { \u0026#34;name\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; } ] } ] The policy tag name provided in test_table.proto file is taken as it is. According to Google Docs, the policy tag string should be of the following format\nprojects/project-id/locations/location/taxonomies/taxonomy-id/policyTags/policytag-id\nLicense protoc-gen-bq-schema is licensed under the Apache License version 2.0. This is not an official Google product.\n"},{"id":6,"href":"/protoc-gen-bq-schema/","title":"BigQuery Schema Generator","parent":"","content":" protoc-gen-bq-schema protoc-gen-bq-schema is a plugin for ProtocolBuffer compiler. It converts messages written in .proto format into schema files in JSON for BigQuery. So you can reuse existing data definitions in .proto for BigQuery with this plugin.\nCommand Line Interface Installation These options are usable, manually from the command line by invoking protoc. These ARE NOT required when using Bazel.\ngo install github.com/rrmcguinness/protoc-gen-bq-schema@latest Usage protoc --bq-schema_out=path/to/outdir [--bq-schema_opt=single-message] foo.proto Path protoc and protoc-gen-bq-schema commands must be found in $PATH. Output The generated JSON schema files are suffixed with .schema and their base names are named after their package names and bq_table_name options. If you do not already have the standard google protobuf libraries in your proto_path, you\u0026rsquo;ll need to specify them directly on the command line (and potentially need to copy bq_schema.proto into a proto_path directory as well), like this:\nprotoc --bq-schema_out=path/to/out/dir foo.proto --proto_path=. --proto_path=\u0026lt;path_to_google_proto_folder\u0026gt;/src "},{"id":7,"href":"/protoc-gen-bq-schema/contributors/","title":"Contributors","parent":"BigQuery Schema Generator","content":" Thank you Finding time to contribute to Open Source can be challenging. These contributors have made this project possible by creating quality code and test cases.\nContributors Git Hub Profiles Yuki Yugui Sonoda yugui mescanne mescanne Sam Gammon sgammon Harsh Gupta Harsh-Git-Hub Alfan Nur Fauzan alpancs Konstantin Chukhlomin chuhlomin Joshua Humphries jhump Daniel McCartney dmccartney Jacob Scherffenberg JacobSMoller Seokchan Sean Ahn sean-ahn Grzegorz Lukasik glukasiknuro Mark Dittmer mdittmer Jeff Tratner jtratner Ryan McGuinness rmcguinness "},{"id":8,"href":"/protoc-gen-bq-schema/examples/","title":"Examples","parent":"BigQuery Schema Generator","content":"These protocol buffer files demonstrate how to use the tags to generate different output specs.\nCommon Protobuf Foo (Proto 3) Foo (Proto 2) Single Message Test Table Common Protobuf 1 2 3 4 5 6 7 8 9 10 11 syntax = \u0026#34;proto3\u0026#34;; import \u0026#34;google/protobuf/timestamp.proto\u0026#34;; option java_package = \u0026#34;somewhere\u0026#34;; message Shared { // Required: The message origination domain string data_descriptor = 1; } Foo (Proto 3) Protobuf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 syntax = \u0026#34;proto3\u0026#34;; package foo; import \u0026#34;bq_table.proto\u0026#34;; import \u0026#34;bq_field.proto\u0026#34;; import \u0026#34;google/protobuf/wrappers.proto\u0026#34;; import \u0026#34;google/protobuf/timestamp.proto\u0026#34;; import \u0026#34;common.proto\u0026#34;; message Bar { option (gen_bq_schema.bigquery_opts).table_name = \u0026#34;bar_proto3_table\u0026#34;; message Nested { repeated int32 a = 1; } // Description of field a -- this is an int32 int32 a = 1; // Nested b structure Nested b = 2; // Repeated c string repeated string c = 3; bool d = 4 [(gen_bq_schema.bigquery).ignore = true]; // TIMESTAMP (uint64 in proto) - required in BigQuery uint64 e = 5 [ (gen_bq_schema.bigquery) = { require: true type_override: \u0026#39;TIMESTAMP\u0026#39; } ]; google.protobuf.Int32Value wkt1 = 11; google.protobuf.Timestamp wkt2 = 12; // Sub-message within the file Baz sub_baz = 13; // Shared data defined in common.proto Shared share_data = 14; } message Baz { int32 a = 1; } Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Description of field a -- this is an int32\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RECORD\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Nested b structure\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REPEATED\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;c\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REPEATED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Repeated c string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;e\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TIMESTAMP\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;TIMESTAMP (uint64 in proto) - required in BigQuery\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;wkt1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;wkt2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TIMESTAMP\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;sub_baz\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RECORD\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sub-message within the file\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;share_data\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RECORD\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Shared data defined in common.proto\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;data_descriptor\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Required: The message origination domain\u0026#34; } ] } ] Foo (Proto 2) proto | schema\nProtobuf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 syntax = \u0026#34;proto2\u0026#34;; package foo; import \u0026#34;bq_table.proto\u0026#34;; import \u0026#34;bq_field.proto\u0026#34;; import \u0026#34;google/protobuf/wrappers.proto\u0026#34;; import \u0026#34;google/protobuf/timestamp.proto\u0026#34;; message Bar { option (gen_bq_schema.bigquery_opts).table_name = \u0026#34;bar_table\u0026#34;; message Nested { repeated int32 a = 1; } // Description of field a -- this is an int32 required int32 a = 1; // Nested b structure optional Nested b = 2; // Repeated c string repeated string c = 3; optional bool d = 4 [(gen_bq_schema.bigquery).ignore = true]; // TIMESTAMP (uint64 in proto) - required in BigQuery optional uint64 e = 5 [ (gen_bq_schema.bigquery) = { require: true type_override: \u0026#39;TIMESTAMP\u0026#39; } ]; optional google.protobuf.Int32Value wkt1 = 11; optional google.protobuf.Timestamp wkt2 = 12; } message Baz { required int32 a = 1; } Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Description of field a -- this is an int32\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RECORD\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Nested b structure\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REPEATED\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;c\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REPEATED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Repeated c string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;e\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TIMESTAMP\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;TIMESTAMP (uint64 in proto) - required in BigQuery\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;wkt1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;wkt2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TIMESTAMP\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; } ] Single Message Protobuf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 syntax = \u0026#34;proto2\u0026#34;; package foo; import \u0026#34;google/protobuf/wrappers.proto\u0026#34;; import \u0026#34;google/protobuf/timestamp.proto\u0026#34;; message Bar { message Nested { repeated int32 a = 1; } // Description of field a -- this is an int32 required int32 a = 1; // Nested b structure optional Nested b = 2; // Repeated c string repeated string c = 3; optional google.protobuf.Int32Value wkt1 = 11; optional google.protobuf.Timestamp wkt2 = 12; } message Baz { required int32 a = 1; } Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Description of field a -- this is an int32\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RECORD\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Nested b structure\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REPEATED\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;c\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REPEATED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Repeated c string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;wkt1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;wkt2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TIMESTAMP\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; } ] Test Table Protobuf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 syntax = \u0026#34;proto3\u0026#34;; package foo; import \u0026#34;bq_table.proto\u0026#34;; import \u0026#34;bq_field.proto\u0026#34;; message TestTable{ option (gen_bq_schema.bigquery_opts).table_name = \u0026#34;test_table\u0026#34;; int32 a = 1 [ (gen_bq_schema.bigquery) = { require: true policy_tags : \u0026#34;private\u0026#34; } ]; string b = 2 [(gen_bq_schema.bigquery).policy_tags=\u0026#34;public\u0026#34;]; message Nested { int32 a = 1 [(gen_bq_schema.bigquery) = { require: true policy_tags : \u0026#34;private\u0026#34; } ]; string b = 2; } repeated Nested nested = 3 [(gen_bq_schema.bigquery).require = true]; message EmptyMessage {} repeated EmptyMessage hasMessage = 4; } Schema 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;policyTags\u0026#34;: { \u0026#34;names\u0026#34;: [ \u0026#34;private\u0026#34; ] } }, { \u0026#34;name\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34;, \u0026#34;policyTags\u0026#34;: { \u0026#34;names\u0026#34;: [ \u0026#34;public ] } }, { \u0026#34;name\u0026#34;: \u0026#34;nested\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;RECORD\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;INTEGER\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;REQUIRED\u0026#34;, \u0026#34;policyTags\u0026#34;: { \u0026#34;names\u0026#34;: [ \u0026#34;private\u0026#34; ] } }, { \u0026#34;name\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;STRING\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;NULLABLE\u0026#34; } ] } ] "},{"id":9,"href":"/protoc-gen-bq-schema/tags/","title":"Tags","parent":"BigQuery Schema Generator","content":""}]